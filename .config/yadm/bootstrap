#!/bin/bash

system_type=$(uname -s)

# Because Git submodule commands cannot operate without a work tree, they must
# be run from within $HOME (assuming this is the root of your dotfiles)
cd "$HOME" || exit

clone_or_update_repository() {
  local path=$1
  local url=$2

  if [ ! -d "$path" ]; then
    # If the directory doesn't exist, clone the repository
    git clone "$url" "$path"
  else
    # If the directory exists, update the repository
    (cd "$path" && git pull)
  fi
}

clone_or_update_repository "$HOME/.local/share/dots/zplug" "https://github.com/zplug/zplug.git"
clone_or_update_repository "$HOME/.local/share/dots/pipes" "https://github.com/pipeseroni/pipes.sh.git"
clone_or_update_repository "$HOME/.local/share/dots/base16-alacritty" "https://github.com/aarowill/base16-alacritty.git"
clone_or_update_repository "$HOME/.tmux/plugins/tpm" "https://github.com/tmux-plugins/tpm.git"
clone_or_update_repository "$HOME/.local/share/pass/audit" "https://github.com/benburwell/pass-audit.git"

if [ "$system_type" = "Darwin" ]; then

  # install homebrew if it's missing
  if ! command -v brew >/dev/null 2>&1; then
    echo "Installing homebrew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  fi

  if [ -f "$HOME/.Brewfile" ]; then
    echo "Updating homebrew bundle"
    brew bundle --global --debug --file "$HOME/.Brewfile"
  fi

  echo "Installing a node LTS version with fnm"
  fnm install --lts
  fnm default lts-latest
fi

# Install aider
if ! command -v aider >/dev/null 2>&1; then
  echo "Installing aider"
  python3 -m pip install aider-install
  aider-install
fi

echo "Installing Neovim modules"
pip3 install neovim
npm install -g neovim

# Install pass audit so I can check password leaks
PREFIX="/opt/homebrew/opt/pass" make install -f "$HOME/.local/share/pass/audit/Makefile"
